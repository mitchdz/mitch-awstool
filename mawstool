#!/bin/bash

aws_region="${AWS_REGION:-}"
aws_instance_id="${AWS_INSTANCE_ID:-}"
aws_key="${AWS_KEY:-}"
aws_arch="${AWS_ARCH:-amd64}"
aws_security_group="${AWS_SECURITY_GROUP:-}"

program_name="mawstool"

help() {
   # Display Help
   echo "$program_name is a helper script to work with awscli"
   echo
   echo "This script sets variables if they exist in your environment already."
   echo "The environvent variables look for the flag in all caps."
   echo "For example, aws_region will be set if AWS_REGION=eu-north-1 is in"
   echo "your environment."
   echo
   echo "Syntax: $program_name [command] [flag]"
   echo "commands:"
   echo "  create_hibernation_instance  create an instance with hibernation settings enabled"
   echo "  describe_security_group      show details about a security group"
   echo "  get_latest_ami               get the latest AMI for a particular release (requires --release [release], and --testing if devel)"
   echo "  get_public_ip                get the public IP of an instance"
   echo "  get_private_ip               get the private IP of an instance"
   echo "  hibernate                    hibernate the instance"
   echo "  hibernate_when_ready         poll the hibernate command until it work"
   echo "  describe                     describe an ami"
   echo "  list                         list instances"
   echo "  list_security_groups         list security groups"
   echo "  ssh                          ssh into an instance"
   echo "  start                        start an instance"
   echo "  stop                         stop an instance"
   echo "  terminate                    terminate an instance"
   echo
   echo "flags:"
   echo "  --aws_ami                 AWS AMI"
   echo "  --aws_arch                (default amd64) AWS instance ID"
   echo "  --aws_instance_id         AWS instance ID"
   echo "  --aws_instance_type       AWS instance type, varies per region"
   echo "  --aws_key                 (inherits AWS_KEY from env) Name of AWS key"
   echo "  --aws_name|-n             Name of AWS instance"
   echo "  --aws_region              (inherits AWS_REGION from env) The AWS region you are operating in"
   echo "  --aws_security_group|--sg (inherits AWS_SECURITY_GROUP from env) The AWS security group"
   echo "  --help|-h|help            This menu"
   echo "  --testing                 helpful for when using get_latest_ami to change to use images-testing"
   echo "  --release                 Ubuntu Release"
   echo "  --verbose|-v              Makes commands more verbose"
   echo
   echo "Examples:"
   echo "  $program_name ssh -n my_instance"
   echo "  $program_name get_private_ip -n my_instance --aws_region eu-north-1"
}

if (( $# == 0 )); then
    help
    exit 0
fi

# Override env variables if explicitly chosen
while [[ $# -gt 0 ]]; do
  option="$1"
  case $option in
    --help|-h|help)
      help
      exit 0 
      ;;
    --aws_region)
      aws_region="$2"
      shift
      shift
      ;;
    --aws_ami)
      aws_ami="$2"
      shift
      shift
      ;;
    --release)
      ubuntu_release="$2"
      shift
      shift
      ;;
    --aws_instance_id)
      aws_instance_id="$2"
      shift
      shift
      ;;
    --aws_instance_type)
      aws_instance_type="$2"
      shift
      shift
      ;;
    --aws_security_group|--sg)
      aws_security_group="$2"
      shift
      shift
      ;;
    --aws_arch)
      aws_arch="$2"
      shift
      shift
      ;;
    --aws_name|-n)
      aws_name="$2"
      shift
      shift
      ;;
    --aws_key)
      aws_key="$2"
      shift
      shift
      ;;
    --testing)
      testing="yes"
      shift
      ;;
    --verbose|-v)
      # probably a better way to handle this?
      set -x
      shift
      ;;
    *)
      # Do nothing
      aws_command="$1"
      shift
      ;;
  esac
done

aws_private_key="$HOME/.ssh/${aws_key}.pem"

list_instances() {
  # shellcheck disable=SC2016
  aws ec2 describe-instances \
    --region "${aws_region}" \
    --query 'Reservations[*].Instances[*].{InstanceID:InstanceId,State:State.Name,Name:Tags[?Key==`Name`].Value | [0],PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress}' \
    --output table
}

list_security_groups() {
  aws ec2 describe-security-groups \
    --region "${aws_region}" \
    --query 'SecurityGroups[*].[GroupId,GroupName,Description]' \
    --output table
}

get_instance_id_from_name() {
  # Get the instance ID based on the tag in the specified region
  aws_instance_id=$(aws ec2 describe-instances --region "$aws_region" \
    --filters "Name=tag:Name,Values=${aws_name}" \
    --query "Reservations[*].Instances[*].InstanceId" \
    --output text)

  # If multiple instances share the same name, or if you use globbing you will get something like:
  # aws_instance_id='i-08d612527ef7047a3
  # i-074b0978a9eb5556e
  # i-0f2f647913b68c10f'
  # from STDOUT. We want to replace these newlines with spaces

  # clean newlines if multiple matches
  aws_instance_id="$(echo "$aws_instance_id" | tr '\n' ' ')"

  echo "${aws_instance_id}"
}

get_instance_public_ip() {
  # TODO: check variables are properly set
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi
  # Get the IP address of the Instance using the Instance ID 
  aws_pubip=$(aws ec2 describe-instances --region "$aws_region" \
    --instance-ids $aws_instance_id \
    --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

  echo "$aws_pubip"
}

start_instance() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  # shellcheck disable=SC2086
  aws ec2 start-instances \
      --instance-ids ${aws_instance_id} \
      --region "${aws_region}"
}

stop_instance() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  # shellcheck disable=SC2086
  aws ec2 stop-instances \
    --instance-ids ${aws_instance_id} \
    --region "${aws_region}"
}

ssh_instance() {
  # Get IP if not provided
  if [ -z "$aws_ipaddr" ]; then
    if [ -z "$aws_instance_id" ]; then
      aws_instance_id=$(get_instance_id_from_name)
    fi

    aws_pubip=$(get_instance_public_ip)
  fi

  ssh -i "${aws_private_key}" \
    -o IdentitiesOnly=yes \
    -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null \
    -o GlobalKnownHostsFile=/dev/null \
    ubuntu@${aws_pubip}
}

get_instance_private_ip() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  aws ec2 describe-instances \
    --instance-ids ${aws_instance_id} \
    --region "${aws_region}" \
    --query 'Reservations[*].Instances[*].PrivateIpAddress' \
    --output text
}

get_latest_ami() {
  image_type="images"
  if [ -v testing ]; then
    image_type+="-testing"
  fi
  aws ec2 describe-images \
  	--owners 099720109477 \
  	--region "$aws_region" \
  	--filters "Name=name,Values=ubuntu/${image_type}/*${ubuntu_release}*${aws_arch}*" \
  	--query 'Images[*].[ImageId,CreationDate,Name]' \
  	--output text \
  	| sort -k2 -r | head -n1 | awk '{print $1}'
}

describe_ami() {
  aws ec2 describe-images \
    --image-ids "$aws_ami"
}

describe_security_group() {
  aws ec2 describe-security-groups \
  	--region "$aws_region" \
    --group-ids "$aws_security_group"
}

terminate_instance() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  # Ask the user if they want to continue
  read -rp "Terminating instance ${aws_instance_id}. Do you want to continue? (y/n): " answer

  # Check the user's response
  if [[ "$answer" != "y" ]]; then
    echo "Exiting..."
    exit 0
  fi
  
  # shellcheck disable=SC2086
  aws ec2 terminate-instances \
    --instance-ids $aws_instance_id \
    --region "$aws_region"
}

hibernate() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi
  aws ec2 stop-instances \
    --instance-ids $aws_instance_id \
    --region "${aws_region}" \
    --hibernate
}

# poll the system and retry hibernate until success
hibernate_when_ready() {
  local max_hibernate_attempts=20
  local hibernate_attempt_sleep_time=10

  # Loop until Hibernation is successful or max_attempts is reached
  for ((i = 1; i <= max_hibernate_attempts; i++)); do
      if hibernate; then
          echo "Hibernation request successful."
          break
      else
          echo "Attempt $i: Hibernation attempt failed. Retrying in $hibernate_attempt_sleep_time seconds..."
          sleep "$hibernate_attempt_sleep_time"
      fi
  done

  if [ "$i" -gt "$max_hibernate_attempts" ]; then
      echo "Max Hibernation attempts reached. Exiting."
  fi
}

create_hibernation_instance() {
  # TODO: more smartly determine volume size. Volume size needs to be able to hold RAM.
  aws ec2 run-instances \
    --region "${aws_region}" \
    --image-id "${aws_ami}" \
    --count 1 \
    --instance-type "${aws_instance_type}" \
    --key-name "${aws_key}" \
    --security-group-ids "$aws_security_group" \
    --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${aws_name}}]" \
    --metadata-options "HttpTokens=required" \
    --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"Encrypted":true,"DeleteOnTermination":true,"VolumeSize":24,"VolumeType":"gp3"}}]' \
    --hibernation-options 'Configured=true'
}

case $aws_command in
  create_hibernation_instance)
    create_hibernation_instance
    ;;
  describe_security_group)
    describe_security_group
    ;;
  list)
    list_instances
    ;;
  list_security_groups)
    list_security_groups
    ;;
  hibernate)
    hibernate
    ;;
  hibernate_when_ready)
    hibernate_when_ready
    ;;
  terminate)
    terminate_instance
    ;;
  describe)
    describe_ami
    ;;
  get_latest_ami)
    get_latest_ami
    ;;
  start)
    start_instance
    ;;
  stop)
    stop_instance
    ;;
  get_private_ip)
    get_instance_private_ip
    ;;
  get_public_ip)
    get_instance_public_ip
    ;;
  ssh)
    ssh_instance
    ;;
  *)
    # Wrong command
    echo "Wrong command"
    exit 1
esac
