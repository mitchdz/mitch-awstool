#!/bin/bash

aws_region="${AWS_REGION:-}"
aws_instance_id="${AWS_INSTANCE_ID:-}"
aws_key="${AWS_KEY:-}"
aws_arch="${AWS_ARCH:-amd64}"

program_name="mawstool"

help() {
   # Display Help
   echo "$program_name is a helper script to work with awscli"
   echo
   echo "This script sets variables if they exist in your environment already."
   echo "The environvent variables look for the flag in all caps."
   echo "For example, aws_region will be set if AWS_REGION=eu-north-1 is in"
   echo "your environment."
   echo
   echo "Syntax: $program_name [command] [flag]"
   echo "commands:"
   echo "  list           list instances"
   echo "  ssh            ssh into an instance"
   echo "  start          start an instance"
   echo "  stop           stop an instance"
   echo "  get_private_ip get the private IP of an instance"
   echo "  get_public_ip  get the public IP of an instance"
   echo "  get_latest_ami get the latest AMI for a particular release (requires --release [release], and --testing if devel)"
   echo "  describe       describe an ami"
   echo
   echo "flags:"
   echo "  --arch             (default amd64) AWS instance ID"
   echo "  --aws_ami          AWS AMI"
   echo "  --aws_instance_id  AWS instance ID"
   echo "  --aws_key          (inherits AWS_KEY from env) Name of AWS key"
   echo "  --aws_name|-n      Name of AWS instance"
   echo "  --aws_region       (inherits AWS_REGION from env) The AWS region you are operating in"
   echo "  --help|-h|help     This menu"
   echo "  --testing          helpful for when using get_latest_ami to change to use images-testing"
   echo "  --release          Ubuntu Release"
   echo "  --verbose|-v       Makes commands more verbose"
   echo
   echo "Examples:"
   echo "  $program_name ssh -n my_instance"
   echo "  $program_name get_private_ip -n my_instance --aws_region eu-north-1"
}

# Override env variables if explicitly chosen
while [[ $# -gt 0 ]]; do
  option="$1"
  case $option in
    --help|-h|help)
      help
      exit 0 
      ;;
    --aws_region)
      aws_region="$2"
      shift
      shift
      ;;
    --aws_ami)
      aws_ami="$2"
      shift
      shift
      ;;
    --release)
      ubuntu_release="$2"
      shift
      shift
      ;;
    --aws_instance_id)
      aws_instance_id="$2"
      shift
      shift
      ;;
    --aws_arch)
      aws_arch="$2"
      shift
      shift
      ;;
    --aws_name|-n)
      aws_name="$2"
      shift
      shift
      ;;
    --aws_key)
      aws_key="$2"
      shift
      shift
      ;;
    --testing)
      testing="yes"
      shift
      ;;
    --verbose|-v)
      # probably a better way to handle this?
      set -x
      shift
      ;;
    *)
      # Do nothing
      aws_command="$1"
      shift
      ;;
  esac
done

aws_private_key="$HOME/.ssh/${aws_key}.pem"

list_instances() {
  # shellcheck disable=SC2016
  aws ec2 describe-instances \
    --region "${aws_region}" \
    --filters Name=tag-key,Values=Name \
    --query 'Reservations[*].Instances[*].{Instance:InstanceId,State:State.Name,Name:Tags[?Key==`Name`]|[0].Value}' \
    --output table
}

get_instance_id_from_name() {
  # Get the instance ID based on the tag in the specified region
  # TODO: handle if multiple instances share the same name
  # TODO: could maybe just use the latest created one? OR fail?
  aws_instance_id=$(aws ec2 describe-instances --region "$aws_region" \
    --filters "Name=tag:Name,Values=${aws_name}" \
    --query "Reservations[*].Instances[*].InstanceId" \
    --output text)
  echo "$aws_instance_id"
}

get_instance_public_ip() {
  # TODO: check variables are properly set
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi
  # Get the IP address of the Instance using the Instance ID 
  aws_pubip=$(aws ec2 describe-instances --region "$aws_region" \
    --instance-ids "$aws_instance_id" \
    --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

  echo "$aws_pubip"
}

start_instance() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  aws ec2 start-instances \
      --instance-ids "${aws_instance_id}" \
      --region "${aws_region}"
}

stop_instance() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  aws ec2 stop-instances \
    --instance-ids "${aws_instance_id}" \
    --region "${aws_region}"
}

ssh_instance() {
  # Get IP if not provided
  if [ -z "$aws_ipaddr" ]; then
    if [ -z "$aws_instance_id" ]; then
      aws_instance_id=$(get_instance_id_from_name)
    fi

    aws_pubip=$(get_instance_public_ip)
  fi

  ssh -i "${aws_private_key}" \
    -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null \
    -o GlobalKnownHostsFile=/dev/null \
    "ubuntu@${aws_pubip}"
}

get_instance_private_ip() {
  if [ -z "$aws_instance_id" ]; then
    aws_instance_id=$(get_instance_id_from_name)
  fi

  aws ec2 describe-instances \
    --instance-ids "${aws_instance_id}" \
    --region "${aws_region}" \
    --query 'Reservations[*].Instances[*].PrivateIpAddress' \
    --output text
}

get_latest_ami() {
  image_type="images"
  if [ -v testing ]; then
    image_type+="-testing"
  fi
  aws ec2 describe-images \
  	--owners 099720109477 \
  	--region "$aws_region" \
  	--filters "Name=name,Values=ubuntu/${image_type}/*${ubuntu_release}*${aws_arch}*" \
  	--query 'Images[*].[ImageId,CreationDate,Name]' \
  	--output text \
  	| sort -k2 -r | head -n1 | awk '{print $1}'
}

describe_ami() {
  aws ec2 describe-images \
      --image-ids "$aws_ami"
}

case $aws_command in
  list)
    list_instances
    ;;
  describe)
    describe_ami
    ;;
  get_latest_ami)
    get_latest_ami
    ;;
  start)
    start_instance
    ;;
  stop)
    stop_instance
    ;;
  get_private_ip)
    get_instance_private_ip
    ;;
  get_public_ip)
    get_instance_public_ip
    ;;
  ssh)
    ssh_instance
    ;;
  *)
    # Wrong command
    echo "Wrong command"
    exit 1
esac
